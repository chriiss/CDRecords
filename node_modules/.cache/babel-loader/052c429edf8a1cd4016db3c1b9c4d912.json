{"remainingRequest":"/home/chriss/Workspace/Web_project/cdrecords/node_modules/babel-loader/lib/index.js!/home/chriss/Workspace/Web_project/cdrecords/node_modules/eslint-loader/index.js??ref--13-0!/home/chriss/Workspace/Web_project/cdrecords/src/components/Contact/sendmail.js","dependencies":[{"path":"/home/chriss/Workspace/Web_project/cdrecords/src/components/Contact/sendmail.js","mtime":1591881868535},{"path":"/home/chriss/Workspace/Web_project/cdrecords/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/chriss/Workspace/Web_project/cdrecords/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/chriss/Workspace/Web_project/cdrecords/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvY2hyaXNzL1dvcmtzcGFjZS9XZWJfcHJvamVjdC9jZHJlY29yZHMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwoKdmFyIG5vZGVtYWlsZXIgPSByZXF1aXJlKCJub2RlbWFpbGVyIik7IC8vIGFzeW5jLi5hd2FpdCBpcyBub3QgYWxsb3dlZCBpbiBnbG9iYWwgc2NvcGUsIG11c3QgdXNlIGEgd3JhcHBlcgoKCmV4cG9ydCBmdW5jdGlvbiBzZW5kbWFpbCgpIHsKICByZXR1cm4gX3NlbmRtYWlsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zZW5kbWFpbCgpIHsKICBfc2VuZG1haWwgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgdGVzdEFjY291bnQsIHRyYW5zcG9ydGVyLCBpbmZvOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIG5vZGVtYWlsZXIuY3JlYXRlVGVzdEFjY291bnQoKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHRlc3RBY2NvdW50ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgLy8gY3JlYXRlIHJldXNhYmxlIHRyYW5zcG9ydGVyIG9iamVjdCB1c2luZyB0aGUgZGVmYXVsdCBTTVRQIHRyYW5zcG9ydAogICAgICAgICAgICB0cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHsKICAgICAgICAgICAgICBob3N0OiAiY2hyaXN0b3BoZXIua3VtbGFAZ21haWwuY29tIiwKICAgICAgICAgICAgICBwb3J0OiA1ODcsCiAgICAgICAgICAgICAgc2VjdXJlOiBmYWxzZSwKICAgICAgICAgICAgICAvLyB0cnVlIGZvciA0NjUsIGZhbHNlIGZvciBvdGhlciBwb3J0cwogICAgICAgICAgICAgIGF1dGg6IHsKICAgICAgICAgICAgICAgIHVzZXI6IHRlc3RBY2NvdW50LnVzZXIsCiAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZWQgZXRoZXJlYWwgdXNlcgogICAgICAgICAgICAgICAgcGFzczogdGVzdEFjY291bnQucGFzcyAvLyBnZW5lcmF0ZWQgZXRoZXJlYWwgcGFzc3dvcmQKCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsgLy8gc2VuZCBtYWlsIHdpdGggZGVmaW5lZCB0cmFuc3BvcnQgb2JqZWN0CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIHRyYW5zcG9ydGVyLnNlbmRNYWlsKHsKICAgICAgICAgICAgICBmcm9tOiAnIkZyZWQgRm9vIPCfkbsiIDxmb29AZXhhbXBsZS5jb20+JywKICAgICAgICAgICAgICAvLyBzZW5kZXIgYWRkcmVzcwogICAgICAgICAgICAgIHRvOiAiYmFyQGV4YW1wbGUuY29tLCBiYXpAZXhhbXBsZS5jb20iLAogICAgICAgICAgICAgIC8vIGxpc3Qgb2YgcmVjZWl2ZXJzCiAgICAgICAgICAgICAgc3ViamVjdDogIkhlbGxvIOKclCIsCiAgICAgICAgICAgICAgLy8gU3ViamVjdCBsaW5lCiAgICAgICAgICAgICAgdGV4dDogIkhlbGxvIHdvcmxkPyIsCiAgICAgICAgICAgICAgLy8gcGxhaW4gdGV4dCBib2R5CiAgICAgICAgICAgICAgaHRtbDogIjxiPkhlbGxvIHdvcmxkPzwvYj4iIC8vIGh0bWwgYm9keQoKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBpbmZvID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2Ugc2VudDogJXMiLCBpbmZvLm1lc3NhZ2VJZCk7IC8vIE1lc3NhZ2Ugc2VudDogPGI2NThmOGNhLTYyOTYtY2NmNC04MzA2LTg3ZDU3YTBiNDMyMUBleGFtcGxlLmNvbT4KICAgICAgICAgICAgLy8gUHJldmlldyBvbmx5IGF2YWlsYWJsZSB3aGVuIHNlbmRpbmcgdGhyb3VnaCBhbiBFdGhlcmVhbCBhY2NvdW50CgogICAgICAgICAgICBjb25zb2xlLmxvZygiUHJldmlldyBVUkw6ICVzIiwgbm9kZW1haWxlci5nZXRUZXN0TWVzc2FnZVVybChpbmZvKSk7IC8vIFByZXZpZXcgVVJMOiBodHRwczovL2V0aGVyZWFsLmVtYWlsL21lc3NhZ2UvV2FRS01nS2RkeFFEb291Li4uCgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX3NlbmRtYWlsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},{"version":3,"sources":["/home/chriss/Workspace/Web_project/cdrecords/src/components/Contact/sendmail.js"],"names":["nodemailer","require","sendmail","createTestAccount","testAccount","transporter","createTransport","host","port","secure","auth","user","pass","sendMail","from","to","subject","text","html","info","console","log","messageId","getTestMessageUrl"],"mappings":";;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B,C,CAEA;;;AACA,gBAAsBC,QAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGmBF,UAAU,CAACG,iBAAX,EAHnB;;AAAA;AAGDC,YAAAA,WAHC;AAKL;AACIC,YAAAA,WANC,GAMaL,UAAU,CAACM,eAAX,CAA2B;AAC3CC,cAAAA,IAAI,EAAE,6BADqC;AAE3CC,cAAAA,IAAI,EAAE,GAFqC;AAG3CC,cAAAA,MAAM,EAAE,KAHmC;AAG5B;AACfC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAEP,WAAW,CAACO,IADd;AACoB;AACxBC,gBAAAA,IAAI,EAAER,WAAW,CAACQ,IAFd,CAEoB;;AAFpB;AAJqC,aAA3B,CANb,EAgBL;;AAhBK;AAAA,mBAiBYP,WAAW,CAACQ,QAAZ,CAAqB;AACpCC,cAAAA,IAAI,EAAE,iCAD8B;AACK;AACzCC,cAAAA,EAAE,EAAE,kCAFgC;AAEI;AACxCC,cAAAA,OAAO,EAAE,SAH2B;AAGhB;AACpBC,cAAAA,IAAI,EAAE,cAJ8B;AAId;AACtBC,cAAAA,IAAI,EAAE,qBAL8B,CAKP;;AALO,aAArB,CAjBZ;;AAAA;AAiBDC,YAAAA,IAjBC;AAyBLC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAI,CAACG,SAArC,EAzBK,CA0BL;AAEA;;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BrB,UAAU,CAACuB,iBAAX,CAA6BJ,IAA7B,CAA/B,EA7BK,CA8BL;;AA9BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const nodemailer = require(\"nodemailer\");\n\n// async..await is not allowed in global scope, must use a wrapper\nexport async function sendmail() {\n  // Generate test SMTP service account from ethereal.email\n  // Only needed if you don't have a real mail account for testing\n  let testAccount = await nodemailer.createTestAccount();\n\n  // create reusable transporter object using the default SMTP transport\n  let transporter = nodemailer.createTransport({\n    host: \"christopher.kumla@gmail.com\",\n    port: 587,\n    secure: false, // true for 465, false for other ports\n    auth: {\n      user: testAccount.user, // generated ethereal user\n      pass: testAccount.pass, // generated ethereal password\n    },\n  });\n\n  // send mail with defined transport object\n  let info = await transporter.sendMail({\n    from: '\"Fred Foo ðŸ‘»\" <foo@example.com>', // sender address\n    to: \"bar@example.com, baz@example.com\", // list of receivers\n    subject: \"Hello âœ”\", // Subject line\n    text: \"Hello world?\", // plain text body\n    html: \"<b>Hello world?</b>\", // html body\n  });\n\n  console.log(\"Message sent: %s\", info.messageId);\n  // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n\n  // Preview only available when sending through an Ethereal account\n  console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\n  // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n}"]}]}