{"remainingRequest":"/home/chriss/Workspace/Web_project/CDRecords/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/chriss/Workspace/Web_project/CDRecords/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/chriss/Workspace/Web_project/CDRecords/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/chriss/Workspace/Web_project/CDRecords/src/components/Contact/Contact.vue?vue&type=template&id=3c9752de&","dependencies":[{"path":"/home/chriss/Workspace/Web_project/CDRecords/src/components/Contact/Contact.vue","mtime":1592223748034},{"path":"/home/chriss/Workspace/Web_project/CDRecords/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/chriss/Workspace/Web_project/CDRecords/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/chriss/Workspace/Web_project/CDRecords/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/chriss/Workspace/Web_project/CDRecords/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}